#!/usr/bin/env python3
# vi:et
# SPDX-License-Identifier: GPL-2.0-only
# Copyright (c) 2020 Max Rees
# See LICENSE for more information.
import logging    # info, error
import os         # environ
import shutil     # copy2, rmtree
import subprocess # check_output
import sys        # argv, exit

import apkfoundry           # MOUNTS, proj_conf, SYSCONFDIR
import apkfoundry.build     # buildrepo, run_after
import apkfoundry.container # Container
import apkfoundry._log as _log
import apkfoundry._util as _util

FAKE_BEFORE = "0000000000000000000000000000000000000000"
SYS_FAIL = os.environ["SYSTEM_FAILURE_EXIT_CODE"]
BUILD_FAIL = os.environ["BUILD_FAILURE_EXIT_CODE"]

os.environ["USE_COLORS"] = "force"
_log.init(color=True, sections=True)

def sanitize_script(script):
    _util.check_call((
        "sed", "-i",
        "-e", f"s@{env.cdir}[/]*@/@g",
        "-e", "/^export 'AF_PRIVKEY_B64'=/d",
        "-e", "0,/^'cd' \"\\/af\\/aports\"$/{//d;}",
        script,
    ))

def get_sources(script, env):
    _util.check_call((script,))
    (env.cdir / "af/scripts").mkdir()

    if env.mr:
        _util.check_call((
            "git", "-C", env.aportsdir,
            "fetch", env.target_url,
            f"+refs/heads/{env.ref}:refs/heads/{env.ref}",
        ))

    proj_config = env.get("AFCI_PROJ_CONF", "").strip().split(maxsplit=1)
    if proj_config:
        url = proj_config[0]
        if len(proj_config) == 2:
            branch = ["--branch", proj_config[1]]
        else:
            branch = []

        if not url.startswith(("http://", "https://", "git://")):
            logging.error("Invalid AFCI_PROJ_CONF URL: %r", url)
            return 1

        _log.section_start(None, "clone_config", "Fetching configuration...")
        _util.check_call((
            "git", "clone", "--quiet", "--depth=1",
            *branch, url, env.aportsdir / ".apkfoundry",
        ))
        _util.check_call((
            "git", "-C", env.aportsdir / ".apkfoundry",
            "show", "--no-patch", "--pretty=tformat:%h %s",
        ))
        _log.section_end(None)

    else:
        if not (env.aportsdir / ".apkfoundry").is_dir():
            logging.critical("No .apkfoundry configuration directory exists!")
            return 1

    return 0

def build_script(script, env):
    shutil.copy2(script, env.cdir / "af/scripts/gl-build")
    sanitize_script(env.cdir / "af/scripts/gl-build")
    try:
        shutil.rmtree(env.tmp)
    except FileNotFoundError:
        pass
    env.tmp.symlink_to("/tmp")
    (env.aportsdir / ".gl-repos").symlink_to("../repos")

    broken = False
    for i in ("AF_PRIVKEY", "AF_PRIVKEY_B64", "AF_PUBKEY"):
        if env.get(i):
            logging.error("The CI variable %r is no longer available", i)
            broken = True
    if broken:
        return 1

    conf = apkfoundry.proj_conf(env.aportsdir, env.ref)

    if conf.getboolean("container.persistent-repodest") and not env.mr:
        repodest = f"{env.project}-{env.ref_slug}"
        repodest = apkfoundry.LOCALSTATEDIR / "repos" / repodest
    else:
        repodest = env.cdir / apkfoundry.MOUNTS["repodest"].lstrip("/")

    if env.mr:
        env.before = subprocess.check_output(
            ("git", "-C", env.aportsdir, "merge-base", env.ref, env.after),
            encoding="utf-8",
        )
        if not env.before or env.before == env.after:
            logging.error("Could not merge %s into %s", env.after, env.ref)
            return 1

    manual_pkgs = env.get("AFCI_PACKAGES", "").strip().split()

    if env.before == FAKE_BEFORE:
        if manual_pkgs:
            logging.info("Manual job detected, ignoring revision range")
        else:
            logging.error("New branch detected, ignoring revision range")
        rev_range = None
    elif env.get("AFCI_MANUAL"):
        logging.info("Manual job detected, ignoring revision range")
        rev_range = None
    else:
        rev_range = " ".join((env.before, env.after))

    args = [
        "--directory", env.cdir,
        "--aportsdir", env.aportsdir,
        "--branch", env.ref,
        "--cache-apk", env.cache_apk,
        "--cache-src", env.cache_src,
        "--delete", "never",
        "--build-script", "/af/scripts/gl-build",
        "--after-script", "/dev/null",
    ]

    if rev_range:
        args += ["--rev-range", rev_range]

    if env.arch:
        args += ["--arch", env.arch]

    args += [
        "--",
        repodest,
        *manual_pkgs,
    ]

    args = [str(i) for i in args]
    rc = apkfoundry.build.buildrepo(args)
    (env.cdir / "af/config/rc").write_text(str(rc))
    env.tmp.unlink()
    return rc

def after_script(script, env):
    shutil.copy2(script, env.cdir / "af/scripts/gl-after")
    sanitize_script(env.cdir / "af/scripts/gl-after")

    return apkfoundry.build.run_after(
        (env.cdir / "af/config/rc").read_text().strip(),
        apkfoundry.container.Container(env.cdir),
        apkfoundry.proj_conf(env.aportsdir, env.ref),
        env.get("AFCI_AFTERDIR"),
        "/af/scripts/gl-after",
    )

env = _util.CI_Env()
script = sys.argv[1]
stage = sys.argv[2]

if stage == "get_sources":
    rc = get_sources(script, env)
elif stage == "build_script":
    rc = build_script(script, env)
elif stage == "after_script":
    if (env.cdir / "af/config").is_dir():
        rc = after_script(script, env)
    else:
        logging.error("Container was not created, skipping after_script")
        rc = 1
else:
    _util.check_call((script,))
    rc = 0

sys.exit(rc)
